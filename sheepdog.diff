diff --git a/cinder/volume/drivers/sheepdog.py b/cinder/volume/drivers/sheepdog.py
index 21d46f9..2a7f913 100644
--- a/cinder/volume/drivers/sheepdog.py
+++ b/cinder/volume/drivers/sheepdog.py
@@ -18,6 +18,7 @@
 SheepDog Volume Driver.
 
 """
+import io
 import re
 
 from oslo_concurrency import processutils
@@ -25,6 +26,7 @@ from oslo_config import cfg
 from oslo_utils import units
 
 from cinder import exception
+from cinder import utils
 from cinder.i18n import _, _LE
 from cinder.image import image_utils
 from cinder.openstack.common import log as logging
@@ -37,6 +39,58 @@ CONF = cfg.CONF
 CONF.import_opt("image_conversion_dir", "cinder.image.image_utils")
 
 
+class SheepdogIOWrapper(io.RawIOBase):
+    """File-like object for Sheepdog"""
+
+    def __init__(self, volume, snapshot_name=None):
+        self._vdiname = volume['name']
+        self._snapshot_name = snapshot_name
+        self._offset = 0
+        self._total = volume['size'] * units.Gi
+
+    def _inc_offset(self, length):
+        self._offset += length
+
+    def _execute(self, cmd, data=None):
+        try:
+            return processutils.execute(*cmd, process_input=data)[0]
+        except (processutils.ProcessExecutionError, OSError):
+            msg = _('Sheepdog I/O Error')
+            raise exception.VolumeDriverException(msg)
+
+    def read(self, length=None):
+        cmd = ['dog', 'vdi', 'read']
+        if self._snapshot_name:
+            cmd.extend(['-s', self._snapshot_name])
+        cmd.extend([self._vdiname, self._offset])
+        if length:
+            cmd.extend([length])
+        data = self._execute(cmd)
+        self._inc_offset(len(data))
+        return data
+
+    def write(self, data):
+        length = len(data)
+        cmd = ('dog', 'vdi', 'write', self._vdiname, self._offset, length)
+        self._execute(cmd, data)
+        self._inc_offset(length)
+        return length
+
+    def tell(self):
+        return self._offset
+
+    def flush(self):
+        pass
+
+    def fileno(self):
+        """Sheepdog does not have support for fileno() so we raise IOError.
+
+        Raising IOError is recommended way to notify caller that interface is
+        not supported - see http://docs.python.org/2/library/io.html#io.IOBase
+        """
+        raise IOError(_("fileno() not supported by RBD()"))
+
+
 class SheepdogDriver(driver.VolumeDriver):
     """Executes commands relating to Sheepdog Volumes."""
 
@@ -64,7 +118,22 @@ class SheepdogDriver(driver.VolumeDriver):
             raise exception.VolumeBackendAPIException(data=exception_message)
 
     def create_cloned_volume(self, volume, src_vref):
-        raise NotImplementedError()
+        """Creates a clone of the specified volume."""
+        LOG.info(('Creating clone of volume: %s') % src_vref['id'])
+        volume_name = src_vref['name']
+        temp_id = 'tmp-snap-%s' % volume['id']
+        temp_snapshot = {'volume_name': volume_name,
+                         'size': src_vref['size'],
+                         'volume_size': src_vref['size'],
+                         'name': 'clone-snap-%s' % volume['id'],
+                         'id': temp_id}
+
+        self.create_snapshot(temp_snapshot)
+
+        try:
+            self.create_volume_from_snapshot(volume, temp_snapshot)
+        finally:
+            self.delete_snapshot(temp_snapshot)
 
     def create_volume(self, volume):
         """Create a sheepdog volume."""
@@ -109,6 +178,24 @@ class SheepdogDriver(driver.VolumeDriver):
                                       'raw')
             self._resize(volume)
 
+    def copy_volume_to_image(self, context, volume, image_service, image_meta):
+        """Copy the volume to the specified image."""
+        with image_utils.temporary_file() as tmp:
+            # image_utils.convert_image() doesn't support "sheepdog:" source,
+            # so we use qemu-img directly.
+            cmd = ('qemu-img',
+                   'convert',
+                   '-t', 'none',
+                   '-O', 'raw',
+                   'sheepdog:%s' % volume['name'],
+                   tmp)
+            utils.execute(*cmd, run_as_root=True)
+
+            image_utils.upload_volume(context,
+                                      image_service,
+                                      image_meta,
+                                      tmp)
+
     def create_snapshot(self, snapshot):
         """Create a sheepdog snapshot."""
         self._try_execute('qemu-img', 'snapshot', '-c', snapshot['name'],
@@ -195,8 +282,19 @@ class SheepdogDriver(driver.VolumeDriver):
 
     def backup_volume(self, context, backup, backup_service):
         """Create a new backup from an existing volume."""
-        raise NotImplementedError()
+        volume = self.db.volume_get(context, backup['volume_id'])
+        temp_snapshot = {'volume_name': volume['name'],
+                         'name': 'tmp-snap-%s' % volume['name']}
+
+        self.create_snapshot(temp_snapshot)
+
+        try:
+            sheepdog_fd = SheepdogIOWrapper(volume, temp_snapshot['name'])
+            backup_service.backup(backup, sheepdog_fd)
+        finally:
+            self.delete_snapshot(temp_snapshot)
 
     def restore_backup(self, context, backup, volume, backup_service):
         """Restore an existing backup to a new or existing volume."""
-        raise NotImplementedError()
+        sheepdog_fd = SheepdogIOWrapper(volume)
+        backup_service.restore(backup, volume['id'], sheepdog_fd)
